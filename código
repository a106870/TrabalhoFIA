import networkx as nx
import matplotlib.pyplot as plt
import random
import copy
from collections import deque

# Criar grafo direcionado
G = nx.DiGraph()

# Definir as 14 cidades (nós)
cidades = [
    "Porto", "Lisboa", 
    "Madrid", "Barcelona", "Sevilha", "Málaga", "Las Palmas",
    "Casablanca", "Rabat", "Tânger", "Agadir", "Fez", "Marraquexe"
]
G.add_nodes_from(cidades)

# Definir frota de veículos (global, por cidade)
frota_base = {
    "autocarro": {
        "capacidade": 50,
        "autonomia": 300,  # km
        "velocidade": 80,  # km/h
        "consumo_combustivel": 0.3,  # L/km
        "quantidade": 20
    },
    "comboio": {
        "capacidade": 500,
        "autonomia": float('inf'),  # Infinita (elétrico)
        "velocidade": 200,  # km/h
        "consumo_combustivel": 0.5,  # L/km
        "quantidade": 10
    },
    "aviao": {
        "capacidade": 200,
        "autonomia": 1000,  # km
        "velocidade": 600,  # km/h
        "consumo_combustivel": 1000,  # L/h
        "quantidade": 5
    },
    "ferry": {
        "capacidade": 300,
        "autonomia": 500,  # km
        "velocidade": 100,  # km/h
        "consumo_combustivel": 200,  # L/h
        "quantidade": 0  # Ajustado por cidade
    },
    "metro": {
        "capacidade": 1000,
        "autonomia": 50,  # km (curtas distâncias urbanas)
        "velocidade": 40,  # km/h
        "consumo_combustivel": 5,  # L/km
        "quantidade": 0  # Ajustado por cidade
    }
}

# Definir atributos para cada cidade
for cidade in cidades:
    # Demanda: número de pessoas a transportar
    if cidade in ["Lisboa", "Madrid", "Barcelona", "Casablanca", "Marraquexe"]:  # Cidades principais
        G.nodes[cidade]["demanda"] = 500000
    elif cidade in ["Porto", "Sevilha", "Málaga"]:  # Cidades secundárias
        G.nodes[cidade]["demanda"] = 200000
    else:  # Cidades menores (Las Palmas, Rabat, Tânger, Agadir, Fez)
        G.nodes[cidade]["demanda"] = 50000

    # Proximidade aos estádios: distância média em km
    if cidade in ["Lisboa", "Porto", "Madrid", "Barcelona"]:  # Cidades com estádios centrais
        G.nodes[cidade]["proximidade_estadio"] = 5
    else:  # Outras cidades, estádios mais distantes
        G.nodes[cidade]["proximidade_estadio"] = 10

    # Prioridade: P = 0.7 * demanda + 0.3 * (1/proximidade)
    G.nodes[cidade]["prioridade"] = (
        0.7 * G.nodes[cidade]["demanda"] + 
        0.3 * (1 / G.nodes[cidade]["proximidade_estadio"])
    )

    # Janela de tempo: lista de intervalos com base em horários dos jogos
    if cidade in ["Lisboa", "Madrid", "Barcelona", "Casablanca", "Marraquexe"]:  # Cidades principais, 2 jogos (16h, 20h)
        G.nodes[cidade]["janela_tempo"] = [(12, 15), (16, 19)]  # 16h: 12h-15h, 20h: 16h-19h
    else:  # Cidades secundárias/menores, 1 jogo (16h)
        G.nodes[cidade]["janela_tempo"] = [(12, 15)]  # 16h: 12h-15h

    # Associar frota à cidade
    G.nodes[cidade]["frota"] = {
        "autocarro": frota_base["autocarro"].copy(),
        "comboio": frota_base["comboio"].copy(),
        "aviao": frota_base["aviao"].copy(),
        "ferry": frota_base["ferry"].copy(),
        "metro": frota_base["metro"].copy()
    }
    G.nodes[cidade]["frota"]["ferry"]["quantidade"] = 2 if cidade in ["Málaga", "Tânger"] else 0
    G.nodes[cidade]["frota"]["metro"]["quantidade"] = 5 if cidade in ["Lisboa", "Madrid", "Barcelona", "Casablanca"] else 0

# Definir rotas viáveis (tabela completa, 50 rotas)
rotas = [
    ("Porto", "Lisboa", {"meio": "comboio", "distancia": 300, "tempo": 2.5, "capacidade": 500, "combustivel": 150, "bloqueio": 0.05, "chuva": 0.3, "nevoeiro": 0.0, "faixas_cortadas": 0.0, "acidentes": 0.0}),
    ("Porto", "Lisboa", {"meio": "autocarro", "distancia": 300, "tempo": 3.5, "capacidade": 50, "combustivel": 90, "bloqueio": 0.2, "chuva": 0.3, "nevoeiro": 0.0, "faixas_cortadas": 0.15, "acidentes": 0.05}),
    ("Porto", "Madrid", {"meio": "aviao", "distancia": 550, "tempo": 2, "capacidade": 200, "combustivel": 1200, "bloqueio": 0.1, "chuva": 0.3, "nevoeiro": 0.2, "faixas_cortadas": 0.0, "acidentes": 0.0}),
    ("Porto", "Barcelona", {"meio": "aviao", "distancia": 900, "tempo": 2.5, "capacidade": 200, "combustivel": 1500, "bloqueio": 0.1, "chuva": 0.3, "nevoeiro": 0.2, "faixas_cortadas": 0.0, "acidentes": 0.0}),
    ("Porto", "Sevilha", {"meio": "aviao", "distancia": 600, "tempo": 2, "capacidade": 200, "combustivel": 1200, "bloqueio": 0.1, "chuva": 0.3, "nevoeiro": 0.2, "faixas_cortadas": 0.0, "acidentes": 0.0}),
    ("Porto", "Casablanca", {"meio": "aviao", "distancia": 850, "tempo": 2.5, "capacidade": 200, "combustivel": 1500, "bloqueio": 0.1, "chuva": 0.3, "nevoeiro": 0.2, "faixas_cortadas": 0.0, "acidentes": 0.0}),
    ("Lisboa", "Madrid", {"meio": "aviao", "distancia": 500, "tempo": 2, "capacidade": 200, "combustivel": 1000, "bloqueio": 0.1, "chuva": 0.3, "nevoeiro": 0.2, "faixas_cortadas": 0.0, "acidentes": 0.0}),
    ("Lisboa", "Madrid", {"meio": "comboio", "distancia": 620, "tempo": 3.5, "capacidade": 500, "combustivel": 200, "bloqueio": 0.05, "chuva": 0.3, "nevoeiro": 0.0, "faixas_cortadas": 0.0, "acidentes": 0.0}),
    ("Lisboa", "Barcelona", {"meio": "aviao", "distancia": 1000, "tempo": 2.5, "capacidade": 200, "combustivel": 1500, "bloqueio": 0.1, "chuva": 0.3, "nevoeiro": 0.2, "faixas_cortadas": 0.0, "acidentes": 0.0}),
    ("Lisboa", "Sevilha", {"meio": "aviao", "distancia": 450, "tempo": 2, "capacidade": 200, "combustivel": 1000, "bloqueio": 0.1, "chuva": 0.3, "nevoeiro": 0.2, "faixas_cortadas": 0.0, "acidentes": 0.0}),
    ("Lisboa", "Málaga", {"meio": "aviao", "distancia": 500, "tempo": 2, "capacidade": 200, "combustivel": 1000, "bloqueio": 0.1, "chuva": 0.3, "nevoeiro": 0.2, "faixas_cortadas": 0.0, "acidentes": 0.0}),
    ("Lisboa", "Casablanca", {"meio": "aviao", "distancia": 580, "tempo": 2, "capacidade": 200, "combustivel": 1000, "bloqueio": 0.1, "chuva": 0.3, "nevoeiro": 0.2, "faixas_cortadas": 0.0, "acidentes": 0.0}),
    ("Lisboa", "Las Palmas", {"meio": "aviao", "distancia": 1300, "tempo": 3, "capacidade": 200, "combustivel": 1800, "bloqueio": 0.1, "chuva": 0.3, "nevoeiro": 0.2, "faixas_cortadas": 0.0, "acidentes": 0.0}),
    ("Madrid", "Barcelona", {"meio": "comboio", "distancia": 620, "tempo": 2.5, "capacidade": 500, "combustivel": 200, "bloqueio": 0.05, "chuva": 0.3, "nevoeiro": 0.0, "faixas_cortadas": 0.0, "acidentes": 0.0}),
    ("Madrid", "Barcelona", {"meio": "aviao", "distancia": 600, "tempo": 2, "capacidade": 200, "combustivel": 1200, "bloqueio": 0.1, "chuva": 0.3, "nevoeiro": 0.2, "faixas_cortadas": 0.0, "acidentes": 0.0}),
    ("Madrid", "Sevilha", {"meio": "comboio", "distancia": 470, "tempo": 2.5, "capacidade": 500, "combustivel": 150, "bloqueio": 0.05, "chuva": 0.3, "nevoeiro": 0.0, "faixas_cortadas": 0.0, "acidentes": 0.0}),
    ("Madrid", "Málaga", {"meio": "comboio", "distancia": 550, "tempo": 2.5, "capacidade": 500, "combustivel": 165, "bloqueio": 0.05, "chuva": 0.3, "nevoeiro": 0.0, "faixas_cortadas": 0.0, "acidentes": 0.0}),
    ("Madrid", "Málaga", {"meio": "aviao", "distancia": 500, "tempo": 2, "capacidade": 200, "combustivel": 1000, "bloqueio": 0.1, "chuva": 0.3, "nevoeiro": 0.2, "faixas_cortadas": 0.0, "acidentes": 0.0}),
    ("Madrid", "Casablanca", {"meio": "aviao", "distancia": 850, "tempo": 2.5, "capacidade": 200, "combustivel": 1500, "bloqueio": 0.1, "chuva": 0.3, "nevoeiro": 0.2, "faixas_cortadas": 0.0, "acidentes": 0.0}),
    ("Madrid", "Las Palmas", {"meio": "aviao", "distancia": 1750, "tempo": 3.5, "capacidade": 200, "combustivel": 2100, "bloqueio": 0.1, "chuva": 0.3, "nevoeiro": 0.2, "faixas_cortadas": 0.0, "acidentes": 0.0}),
    ("Barcelona", "Sevilha", {"meio": "comboio", "distancia": 1000, "tempo": 5, "capacidade": 500, "combustivel": 300, "bloqueio": 0.05, "chuva": 0.3, "nevoeiro": 0.0, "faixas_cortadas": 0.0, "acidentes": 0.0}),
    ("Barcelona", "Málaga", {"meio": "comboio", "distancia": 900, "tempo": 4.5, "capacidade": 500, "combustivel": 270, "bloqueio": 0.05, "chuva": 0.3, "nevoeiro": 0.0, "faixas_cortadas": 0.0, "acidentes": 0.0}),
    ("Barcelona", "Málaga", {"meio": "aviao", "distancia": 800, "tempo": 2.5, "capacidade": 200, "combustivel": 1500, "bloqueio": 0.1, "chuva": 0.3, "nevoeiro": 0.2, "faixas_cortadas": 0.0, "acidentes": 0.0}),
    ("Barcelona", "Casablanca", {"meio": "aviao", "distancia": 1200, "tempo": 3, "capacidade": 200, "combustivel": 1800, "bloqueio": 0.1, "chuva": 0.3, "nevoeiro": 0.2, "faixas_cortadas": 0.0, "acidentes": 0.0}),
    ("Sevilha", "Málaga", {"meio": "comboio", "distancia": 200, "tempo": 2, "capacidade": 500, "combustivel": 60, "bloqueio": 0.05, "chuva": 0.3, "nevoeiro": 0.0, "faixas_cortadas": 0.0, "acidentes": 0.0}),
    ("Sevilha", "Málaga", {"meio": "autocarro", "distancia": 200, "tempo": 2.5, "capacidade": 50, "combustivel": 60, "bloqueio": 0.2, "chuva": 0.3, "nevoeiro": 0.0, "faixas_cortadas": 0.15, "acidentes": 0.05}),
    ("Sevilha", "Casablanca", {"meio": "aviao", "distancia": 700, "tempo": 2.5, "capacidade": 200, "combustivel": 1500, "bloqueio": 0.1, "chuva": 0.3, "nevoeiro": 0.2, "faixas_cortadas": 0.0, "acidentes": 0.0}),
    ("Málaga", "Tânger", {"meio": "ferry", "distancia": 160, "tempo": 2, "capacidade": 300, "combustivel": 200, "bloqueio": 0.1, "chuva": 0.3, "nevoeiro": 0.2, "faixas_cortadas": 0.0, "acidentes": 0.0}),
    ("Málaga", "Casablanca", {"meio": "aviao", "distancia": 600, "tempo": 2, "capacidade": 200, "combustivel": 1200, "bloqueio": 0.1, "chuva": 0.3, "nevoeiro": 0.2, "faixas_cortadas": 0.0, "acidentes": 0.0}),
    ("Las Palmas", "Casablanca", {"meio": "aviao", "distancia": 1000, "tempo": 2.5, "capacidade": 200, "combustivel": 1500, "bloqueio": 0.1, "chuva": 0.3, "nevoeiro": 0.2, "faixas_cortadas": 0.0, "acidentes": 0.0}),
    ("Las Palmas", "Madrid", {"meio": "aviao", "distancia": 1750, "tempo": 3.5, "capacidade": 200, "combustivel": 2100, "bloqueio": 0.1, "chuva": 0.3, "nevoeiro": 0.2, "faixas_cortadas": 0.0, "acidentes": 0.0}),
    ("Casablanca", "Rabat", {"meio": "comboio", "distancia": 90, "tempo": 1, "capacidade": 500, "combustivel": 30, "bloqueio": 0.05, "chuva": 0.3, "nevoeiro": 0.0, "faixas_cortadas": 0.0, "acidentes": 0.0}),
    ("Casablanca", "Rabat", {"meio": "autocarro", "distancia": 90, "tempo": 1.5, "capacidade": 50, "combustivel": 27, "bloqueio": 0.2, "chuva": 0.3, "nevoeiro": 0.0, "faixas_cortadas": 0.15, "acidentes": 0.05}),
    ("Casablanca", "Tânger", {"meio": "comboio", "distancia": 340, "tempo": 2.5, "capacidade": 500, "combustivel": 100, "bloqueio": 0.05, "chuva": 0.3, "nevoeiro": 0.0, "faixas_cortadas": 0.0, "acidentes": 0.0}),
    ("Casablanca", "Marraquexe", {"meio": "comboio", "distancia": 240, "tempo": 2.5, "capacidade": 500, "combustivel": 80, "bloqueio": 0.05, "chuva": 0.3, "nevoeiro": 0.0, "faixas_cortadas": 0.0, "acidentes": 0.0}),
    ("Casablanca", "Fez", {"meio": "comboio", "distancia": 300, "tempo": 3, "capacidade": 500, "combustivel": 100, "bloqueio": 0.1, "chuva": 0.3, "nevoeiro": 0.0, "faixas_cortadas": 0.0, "acidentes": 0.0}),
    ("Rabat", "Tânger", {"meio": "comboio", "distancia": 250, "tempo": 2, "capacidade": 500, "combustivel": 80, "bloqueio": 0.05, "chuva": 0.3, "nevoeiro": 0.0, "faixas_cortadas": 0.0, "acidentes": 0.0}),
    ("Rabat", "Tânger", {"meio": "autocarro", "distancia": 250, "tempo": 3, "capacidade": 50, "combustivel": 75, "bloqueio": 0.2, "chuva": 0.3, "nevoeiro": 0.0, "faixas_cortadas": 0.15, "acidentes": 0.05}),
    ("Rabat", "Lisboa", {"meio": "comboio+aviao", "distancia": 670, "tempo": 4, "capacidade": 200, "combustivel": 1100, "bloqueio": 0.15, "chuva": 0.3, "nevoeiro": 0.2, "faixas_cortadas": 0.0, "acidentes": 0.0, "multimodal": "Rabat-Casablanca-Lisboa"}),
    ("Tânger", "Rabat", {"meio": "comboio", "distancia": 250, "tempo": 2, "capacidade": 500, "combustivel": 80, "bloqueio": 0.05, "chuva": 0.3, "nevoeiro": 0.0, "faixas_cortadas": 0.0, "acidentes": 0.0}),
    ("Tânger", "Málaga", {"meio": "ferry", "distancia": 160, "tempo": 2, "capacidade": 300, "combustivel": 200, "bloqueio": 0.1, "chuva": 0.3, "nevoeiro": 0.2, "faixas_cortadas": 0.0, "acidentes": 0.0}),
    ("Tânger", "Lisboa", {"meio": "comboio+aviao", "distancia": 920, "tempo": 5, "capacidade": 200, "combustivel": 1300, "bloqueio": 0.15, "chuva": 0.3, "nevoeiro": 0.2, "faixas_cortadas": 0.0, "acidentes": 0.0, "multimodal": "Tânger-Casablanca-Lisboa"}),
    ("Marraquexe", "Agadir", {"meio": "autocarro", "distancia": 250, "tempo": 3, "capacidade": 50, "combustivel": 75, "bloqueio": 0.2, "chuva": 0.3, "nevoeiro": 0.0, "faixas_cortadas": 0.15, "acidentes": 0.05}),
    ("Marraquexe", "Casablanca", {"meio": "comboio", "distancia": 240, "tempo": 2.5, "capacidade": 500, "combustivel": 80, "bloqueio": 0.05, "chuva": 0.3, "nevoeiro": 0.0, "faixas_cortadas": 0.0, "acidentes": 0.0}),
    ("Marraquexe", "Madrid", {"meio": "aviao", "distancia": 1100, "tempo": 3, "capacidade": 200, "combustivel": 1800, "bloqueio": 0.1, "chuva": 0.3, "nevoeiro": 0.2, "faixas_cortadas": 0.0, "acidentes": 0.0}),
    ("Agadir", "Marraquexe", {"meio": "autocarro", "distancia": 250, "tempo": 3, "capacidade": 50, "combustivel": 75, "bloqueio": 0.2, "chuva": 0.3, "nevoeiro": 0.0, "faixas_cortadas": 0.15, "acidentes": 0.05}),
    ("Agadir", "Casablanca", {"meio": "autocarro", "distancia": 450, "tempo": 5, "capacidade": 50, "combustivel": 135, "bloqueio": 0.2, "chuva": 0.3, "nevoeiro": 0.0, "faixas_cortadas": 0.15, "acidentes": 0.05}),
    ("Agadir", "Madrid", {"meio": "autocarro+aviao", "distancia": 1350, "tempo": 6, "capacidade": 200, "combustivel": 2000, "bloqueio": 0.2, "chuva": 0.3, "nevoeiro": 0.2, "faixas_cortadas": 0.0, "acidentes": 0.0, "multimodal": "Agadir-Marraquexe-Madrid"}),
    ("Fez", "Casablanca", {"meio": "comboio", "distancia": 300, "tempo": 3, "capacidade": 500, "combustivel": 100, "bloqueio": 0.1, "chuva": 0.3, "nevoeiro": 0.0, "faixas_cortadas": 0.0, "acidentes": 0.0}),
    ("Fez", "Lisboa", {"meio": "comboio+aviao", "distancia": 880, "tempo": 6, "capacidade": 200, "combustivel": 1200, "bloqueio": 0.15, "chuva": 0.3, "nevoeiro": 0.2, "faixas_cortadas": 0.0, "acidentes": 0.0, "multimodal": "Fez-Casablanca-Lisboa"}),
]
G.add_edges_from([(u, v, d) for u, v, d in rotas])

# Função para simular condições variáveis
def simular_condicoes(G):
    for u, v, d in G.edges(data=True):
        # Chuva: 30% de chance, aumenta tempo em 20%
        if random.random() < d["chuva"]:
            d["tempo_ajustado"] = d["tempo"] * 1.2
            d["condicao"] = "Chuva"
        else:
            d["tempo_ajustado"] = d["tempo"]
            d["condicao"] = "Normal"

        # Nevoeiro: 20% de chance para aviões e ferries, aumenta tempo em 50% ou bloqueia
        if d["meio"] in ["aviao", "ferry", "comboio+aviao", "autocarro+aviao"] and random.random() < d["nevoeiro"]:
            if random.random() < 0.5:  # 50% de chance de bloqueio total
                d["tempo_ajustado"] = float('inf')  # Rota bloqueada
                d["condicao"] = "Nevoeiro (Bloqueado)"
            else:
                d["tempo_ajustado"] = d["tempo"] * 1.5
                d["condicao"] = "Nevoeiro (Atraso)"

        # Faixas cortadas: 15% de chance para autocarros, aumenta tempo em 30%
        if d["meio"] in ["autocarro"] and random.random() < d["faixas_cortadas"]:
            d["tempo_ajustado"] = d["tempo"] * 1.3
            d["condicao"] = "Faixas Cortadas"

        # Acidentes: 5% de chance para autocarros, bloqueia rota
        if d["meio"] in ["autocarro"] and random.random() < d["acidentes"]:
            d["tempo_ajustado"] = float('inf')  # Rota bloqueada
            d["condicao"] = "Acidente"

# Classe para formular o problema de procura
class TransportProblem:
    def __init__(self, grafo, cidade_inicial, cidade_final, hora_inicial, demanda):
        self.grafo = grafo
        self.cidade_inicial = cidade_inicial
        self.cidade_final = cidade_final
        self.hora_inicial = hora_inicial
        self.demanda = demanda

    def initial_state(self):
        return {
            'cidade': self.cidade_inicial,
            'frota': copy.deepcopy(self.grafo.nodes[self.cidade_inicial]['frota']),  # Cópia profunda da frota
            'hora': self.hora_inicial,
            'pessoas_transportadas': 0,
            'demanda_restante': self.demanda,
            'custo_acumulado': 0,  # Custo total (tempo + combustível)
            'veiculos_usados': []  # Lista de veículos alocados
        }

    def goal_test(self, state):
        # Objetivo: Estar na cidade final, ter transportado a demanda, dentro da janela de tempo
        janela = self.grafo.nodes[self.cidade_final]['janela_tempo'][0][1]  # e.g., 15h
        return (state['cidade'] == self.cidade_final and
                state['pessoas_transportadas'] >= self.demanda and
                state['hora'] <= janela)

    def actions(self, state):
        # Retorna rotas disponíveis da cidade atual, com veículos disponíveis
        acoes = []
        for u, v, d in self.grafo.out_edges(state['cidade'], data=True):
            meio = d['meio']
            # Verifica se há veículos disponíveis e se a rota não está bloqueada
            if (state['frota'][meio.split('+')[0]]['quantidade'] > 0 and  # Considera o primeiro meio em rotas multimodais
                d['tempo_ajustado'] != float('inf')):
                acoes.append((v, meio))
        return acoes

    def result(self, state, action):
        # Aplica a ação (mover para cidade destino usando um meio) e retorna novo estado
        cidade_destino, meio = action
        # Encontrar a aresta correspondente
        for u, v, d in self.grafo.out_edges(state['cidade'], data=True):
            if v == cidade_destino and d['meio'] == meio:
                edge_data = d
                break
        
        novo_estado = copy.deepcopy(state)  # Cópia profunda para evitar mutação
        novo_estado['cidade'] = cidade_destino
        novo_estado['hora'] += edge_data['tempo_ajustado']
        pessoas = min(edge_data['capacidade'], novo_estado['demanda_restante'])  # Transporta o mínimo entre capacidade e demanda
        novo_estado['pessoas_transportadas'] += pessoas
        novo_estado['demanda_restante'] -= pessoas
        # Atualiza frota (assume 1 veículo usado por ação)
        meio_principal = meio.split('+')[0]  # e.g., 'comboio' em 'comboio+aviao'
        novo_estado['frota'][meio_principal]['quantidade'] -= 1
        # Acumula custo
        novo_estado['custo_acumulado'] += (0.6 * edge_data['tempo_ajustado'] + 0.3 * edge_data['combustivel'])
        # Registra veículo usado
        novo_estado['veiculos_usados'].append((meio, cidade_destino, edge_data['capacidade'], edge_data['tempo_ajustado'], edge_data['combustivel'], edge_data.get('condicao', 'Normal')))
        return novo_estado

    def path_cost(self, custo_atual, state, action, proximo_estado):
        # Custo acumulado: tempo ajustado (60%) + combustível (30%) + penalidade por demanda restante (10%)
        cidade_destino, meio = action
        for u, v, d in self.grafo.out_edges(state['cidade'], data=True):
            if v == cidade_destino and d['meio'] == meio:
                edge_data = d
                break
        penalidade = 0.1 * proximo_estado['demanda_restante']  # Penalidade proporcional à demanda não atendida
        return custo_atual + (0.6 * edge_data['tempo_ajustado'] + 0.3 * edge_data['combustivel'] + penalidade)

# Função para encontrar o caminho mais curto (BFS)
def encontrar_caminho(problema, cidade_inicial, cidade_final):
    estado_inicial = problema.initial_state()
    if cidade_inicial == cidade_final:
        return []

    # Fila para BFS: (estado, caminho até aqui, ações tomadas)
    fila = deque([(estado_inicial, [cidade_inicial], [])])
    visitados = set([cidade_inicial])

    while fila:
        estado, caminho, acoes = fila.popleft()
        cidade_atual = estado['cidade']

        for acao in problema.actions(estado):
            cidade_destino, meio = acao
            if cidade_destino in visitados:
                continue

            novo_estado = problema.result(estado, acao)
            novo_caminho = caminho + [cidade_destino]
            novas_acoes = acoes + [acao]

            if cidade_destino == cidade_final:
                return novas_acoes  # Retorna a lista de ações para chegar ao destino

            visitados.add(cidade_destino)
            fila.append((novo_estado, novo_caminho, novas_acoes))

    return None  # Nenhum caminho encontrado

# Função para o menu interativo
def menu_interativo(G):
    print("\n=== Planejador de Transporte - Mundial 2030 ===")
    
    # Simular condições antes de começar
    simular_condicoes(G)
    
    # Escolher cidade inicial
    print("\nCidades disponíveis:", ", ".join(cidades))
    while True:
        cidade_inicial = input("Escolha a cidade inicial: ").strip()
        if cidade_inicial in cidades:
            break
        print("Cidade inválida. Tente novamente.")
    
    # Escolher cidade final
    while True:
        cidade_final = input("Escolha a cidade final: ").strip()
        if cidade_final in cidades and cidade_final != cidade_inicial:
            break
        print("Cidade inválida ou igual à inicial. Tente novamente.")
    
    # Criar problema de transporte
    problema = TransportProblem(
        grafo=G,
        cidade_inicial=cidade_inicial,
        cidade_final=cidade_final,
        hora_inicial=10,  # Hora inicial fixa (pode ser ajustada)
        demanda=G.nodes[cidade_inicial]['demanda']  # Demanda da cidade inicial
    )
    
    # Encontrar o caminho usando BFS
    caminho_acoes = encontrar_caminho(problema, cidade_inicial, cidade_final)
    if not caminho_acoes:
        print(f"\nNenhuma rota disponível de {cidade_inicial} para {cidade_final} (bloqueada ou sem frota).")
        return
    
    # Mostrar o caminho encontrado
    print(f"\nCaminho encontrado de {cidade_inicial} para {cidade_final}:")
    cidade_atual = cidade_inicial
    for i, (destino, meio) in enumerate(caminho_acoes, 1):
        for u, v, d in G.out_edges(cidade_atual, data=True):
            if v == destino and d['meio'] == meio:
                print(f"{i}. {cidade_atual} -> {destino} ({meio}, Tempo: {d['tempo_ajustado']:.2f}h, Capacidade: {d['capacidade']}, Condição: {d.get('condicao', 'Normal')})")
                break
        cidade_atual = destino
    
    # Escolher qual trecho executar (simplificação: executa o primeiro trecho por padrão)
    print("\nPor simplicidade, vamos executar o primeiro trecho do caminho.")
    acao_escolhida = caminho_acoes[0]  # Primeiro trecho
    
    # Calcular o estado após executar a ação
    estado = problema.initial_state()
    novo_estado = problema.result(estado, acao_escolhida)
    custo = problema.path_cost(0, estado, acao_escolhida, novo_estado)
    
    # Exibir resultado do trecho
    print(f"\n=== Resultado da Operação (Primeiro Trecho) ===")
    print(f"Rota: {estado['cidade']} -> {novo_estado['cidade']}")
    print(f"Meio: {acao_escolhida[1]}")
    print(f"Tempo Ajustado: {novo_estado['veiculos_usados'][0][3]:.2f} horas")
    print(f"Condição: {novo_estado['veiculos_usados'][0][5]}")
    print(f"Pessoas Transportadas: {novo_estado['pessoas_transportadas']}")
    print(f"Demanda Restante: {novo_estado['demanda_restante']}")
    print(f"Combustível Consumido: {novo_estado['veiculos_usados'][0][4]} L")
    print(f"Custo Total: {custo:.2f} unidades")
    print(f"Hora de Chegada: {novo_estado['hora']:.2f}h")
    print(f"Janela de Tempo: {G.nodes[cidade_final]['janela_tempo']}")
    print(f"Objetivo Alcançado? {'Sim' if problema.goal_test(novo_estado) else 'Não'}")

# Executar menu interativo
menu_interativo(G)

# Visualizar grafo (opcional)
pos = nx.spring_layout(G)
nx.draw(G, pos, with_labels=True, node_color="lightblue", node_size=500, font_size=10, edge_color="gray")
plt.title("Grafo das Cidades-Sede do Mundial 2030 com Faixas Cortadas e Acidentes")
plt.savefig('grafo_mundial_2030.png')

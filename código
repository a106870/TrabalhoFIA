import random
import networkx as nx
import matplotlib.pyplot as plt
import heapq
from collections import deque


class Grafo:
    def __init__(self):
        self.grafo = {}

    def adicionar_ligacao(self, origem, destino, distancia, transportes):
        if origem not in self.grafo:
            self.grafo[origem] = {}
        self.grafo[origem][destino] = {
            "distancia": distancia,
            "transportes": transportes
        }

    def obter_ligacoes(self, cidade):
        return self.grafo.get(cidade, {})

    def mostrar_grafo(self):
        for origem, destinos in self.grafo.items():
            for destino, dados in destinos.items():
                print(f"{origem} -> {destino} | {dados}")

class Veiculo:
    def __init__(self, nome, capacidade, velocidade, autonomia):
        self.nome = nome
        self.capacidade = capacidade            # nº máximo de passageiros
        self.velocidade = velocidade            # km/h
        self.autonomia = autonomia              # km antes de reabastecer

    def __str__(self):
        return f"{self.nome}: Cap={self.capacidade}, Vel={self.velocidade}km/h, Aut={self.autonomia}km"
    
veiculos_disponiveis = {
    "autocarro": Veiculo("Autocarro", capacidade=50, velocidade=80, autonomia=600),
    "comboio": Veiculo("Comboio", capacidade=200, velocidade=120, autonomia=1500),
    "avião": Veiculo("Avião", capacidade=300, velocidade=800, autonomia=3000)
}

distancias_aereas = {
    ("Lisboa", "Madrid"): 500,
    ("Lisboa", "Porto"): 270,
    ("Lisboa", "Casablanca"): 600,
    ("Porto", "Madrid"): 480,
    ("Madrid", "Barcelona"): 500,
    ("Madrid", "Sevilla"): 390,
    ("Madrid", "Bilbao"): 350,
    ("Barcelona", "Bilbao"): 450,
    ("Casablanca", "Rabat"): 90,
    ("Casablanca", "Marraquexe"): 240,
    ("Rabat", "Tânger"): 250,
    ("Tânger", "Sevilla"): 340,
    ("Sevilla", "Lisboa"): 460,
    ("Marraquexe", "Casablanca"): 240,
    # Também para o sentido inverso
    ("Madrid", "Lisboa"): 500,
    ("Porto", "Lisboa"): 270,
    ("Casablanca", "Lisboa"): 600,
    ("Madrid", "Porto"): 480,
    ("Barcelona", "Madrid"): 500,
    ("Sevilla", "Madrid"): 390,
    ("Bilbao", "Madrid"): 350,
    ("Bilbao", "Barcelona"): 450,
    ("Rabat", "Casablanca"): 90,
    ("Marraquexe", "Casablanca"): 240,
    ("Tânger", "Rabat"): 250,
    ("Sevilla", "Tânger"): 340,
    ("Lisboa", "Sevilla"): 460,
}
# Instanciar grafo e adicionar as ligações
def criar_grafo_mundial2030():
    grafo = Grafo()
    grafo.adicionar_ligacao("Lisboa", "Madrid", 625, ["autocarro", "comboio", "avião"])
    grafo.adicionar_ligacao("Lisboa", "Porto", 313, ["autocarro", "comboio"])
    grafo.adicionar_ligacao("Lisboa", "Casablanca", 820, ["avião"])
    grafo.adicionar_ligacao("Porto", "Lisboa", 313, ["autocarro", "comboio"])
    grafo.adicionar_ligacao("Porto", "Madrid", 560, ["autocarro", "avião"])

# Espanha
    grafo.adicionar_ligacao("Madrid", "Barcelona", 620, ["autocarro", "comboio", "avião"])
    grafo.adicionar_ligacao("Madrid", "Sevilla", 530, ["autocarro", "comboio", "avião"])
    grafo.adicionar_ligacao("Madrid", "Bilbao", 400, ["comboio", "avião"])
    grafo.adicionar_ligacao("Madrid", "Porto", 560, ["autocarro", "avião"])
    grafo.adicionar_ligacao("Barcelona", "Madrid", 620, ["autocarro", "comboio", "avião"])
    grafo.adicionar_ligacao("Barcelona", "Bilbao", 610, ["comboio"])
    grafo.adicionar_ligacao("Sevilla", "Madrid", 530, ["autocarro", "comboio"])
    grafo.adicionar_ligacao("Sevilla", "Lisboa", 460, ["autocarro","avião"])
    grafo.adicionar_ligacao("Sevilla", "Tânger", 270, ["avião"])
    grafo.adicionar_ligacao("Bilbao", "Madrid", 400, ["comboio", "avião"])
    grafo.adicionar_ligacao("Bilbao", "Barcelona", 610, ["comboio"])

# Marrocos
    grafo.adicionar_ligacao("Casablanca", "Lisboa", 820, ["avião"])
    grafo.adicionar_ligacao("Casablanca", "Rabat", 90, ["comboio", "autocarro"])
    grafo.adicionar_ligacao("Casablanca", "Marraquexe", 240, ["comboio", "autocarro"])
    grafo.adicionar_ligacao("Rabat", "Casablanca", 90, ["comboio", "autocarro"])
    grafo.adicionar_ligacao("Rabat", "Tânger", 250, ["comboio", "autocarro"])
    grafo.adicionar_ligacao("Tânger", "Rabat", 250, ["comboio", "autocarro"])
    grafo.adicionar_ligacao("Tânger", "Sevilla", 270, ["avião"])
    grafo.adicionar_ligacao("Marraquexe", "Casablanca", 240, ["comboio", "autocarro"])
    grafo.mostrar_grafo()
    return grafo
    # para visualização gráfica (com matplotlib)

def desenhar_grafo(grafo):
    G = nx.DiGraph()

    for origem in grafo.grafo:
        for destino, dados in grafo.grafo[origem].items():
            label = ", ".join(dados["transportes"])
            G.add_edge(origem, destino, label=label)

    pos = nx.spring_layout(G, seed=42)
    edge_labels = nx.get_edge_attributes(G, 'label')
    nx.draw(G, pos, with_labels=True, node_size=2000, node_color='lightblue', font_size=10)
    nx.draw_networkx_edge_labels(G, pos, edge_labels=edge_labels, font_color='red')
    plt.title("Mapa de Ligações entre Cidades")
    plt.show()
    input("Pressiona Enter para terminar...")
# Visualizar o grafo
grafo = criar_grafo_mundial2030()
grafo.mostrar_grafo()         # para visualização textual
desenhar_grafo(grafo) 



def simular_condicoes_meteorologicas(grafo, probabilidade_afetacao=0.2):
    """
    Simula condições meteorológicas adversas sobre algumas ligações do grafo.
    
    Args:
        grafo (Grafo): O grafo com as ligações.
        probabilidade_afetacao (float): Probabilidade de uma rota ser afetada (entre 0 e 1).
    
    Returns:
        dict: Dicionário com rotas afetadas e os transportes impactados.
    """
    condicoes = {}
    tipos_clima = ["chuva", "nevoeiro", "calor extremo"]
    impacto_por_clima = {
        "chuva": ["autocarro", "comboio"],
        "nevoeiro": ["avião"],
        "calor extremo": ["comboio", "avião"]
    }

    for origem in grafo.grafo:
        for destino in grafo.grafo[origem]:
            if random.random() < probabilidade_afetacao:
                clima = random.choice(tipos_clima)
                transportes_afetados = [
                    t for t in grafo.grafo[origem][destino]["transportes"]
                    if t in impacto_por_clima[clima]
                ]
                if transportes_afetados:
                    condicoes[(origem, destino)] = {
                        "clima": clima,
                        "afeta": transportes_afetados
                    }

    return condicoes

def obter_estados_do_utilizador(grafo):
    cidades = list(grafo.grafo.keys())

    while True:
        origem = input("Cidade de partida: ").strip().capitalize()
        if origem in cidades:
            break
        print("Cidade inválida. Tenta novamente.")

    while True:
        destino = input("Cidade de destino: ").strip().capitalize()
        if destino in cidades:
            break
        print("Cidade inválida. Tenta novamente.")

    return origem, destino


def gerar_operadores_multimodais(grafo, estado_atual, condicoes):
    cidade_atual, transporte_atual = estado_atual
    movimentos = []

    ligacoes = grafo.obter_ligacoes(cidade_atual)
    for destino, dados in ligacoes.items():
        for transporte in dados["transportes"]:
            # Verificar se transporte está afetado por clima
            if (cidade_atual, destino) in condicoes:
                if transporte in condicoes[(cidade_atual, destino)]["afeta"]:
                    continue  # bloqueado

            # Custo extra se mudar de transporte
            custo_troca = 0
            if transporte != transporte_atual and transporte_atual != "nenhum":
                custo_troca = 0.5  # penalização só se mudar de transporte depois de começar a viajar
            else:
                custo_troca = 0

            movimentos.append({
                "estado": (destino, transporte),
                "distancia": dados["distancia"],
                "transporte": transporte,
                "custo_troca": custo_troca
            })
    return movimentos

def calcular_tempo_viagem(distancia, transporte, origem, destino, condicoes_meteorologicas):
    velocidade = veiculos_disponiveis[transporte].velocidade
    tempo_base = distancia / velocidade

    penalizacao = 1.0  # sem penalização

    if (origem, destino) in condicoes_meteorologicas:
        condicao = condicoes_meteorologicas[(origem, destino)]
        if transporte in condicao["afeta"]:
            if condicao["clima"] == "chuva":
                penalizacao = 1.25 if transporte in ["autocarro", "comboio"] else 1.0
            elif condicao["clima"] == "nevoeiro":
                penalizacao = 1.5 if transporte == "avião" else 1.0
            elif condicao["clima"] == "calor extremo":
                penalizacao = 1.2 if transporte in ["comboio", "avião"] else 1.0

    return tempo_base * penalizacao

eventos_importantes = ["Madrid", "Lisboa", "Sevilla"]

def calcular_prioridade(zona):
    procura = procura_por_zona.get(zona, 0)
    evento = 10 if zona in eventos_importantes else 0
    dificuldade = 2 if zona in ["Marraquexe", "Tânger"] else 0
    prioridade_base = (procura / procura_maxima) * 10
    prioridade_total = prioridade_base + evento + dificuldade
    return min(10, round(prioridade_total))

def gerar_procura_por_zona(cidades, minimo=2000, maximo=15000):
    return {cidade: random.randint(minimo, maximo) for cidade in cidades}

cidades = ["Lisboa", "Madrid", "Barcelona", "Sevilla", "Porto",
           "Bilbao", "Casablanca", "Rabat", "Tânger", "Marraquexe"]

procura_por_zona = gerar_procura_por_zona(cidades)
procura_maxima = max(procura_por_zona.values())


def calcular_pessoas_transportadas(grafo, origem, destino, condicoes_meteorologicas,
                                   veiculos_disponiveis, disponibilidade_veiculos,
                                   tempo_limite=19.75):
    movimentos = gerar_operadores_multimodais(grafo, origem, condicoes_meteorologicas)
    pessoas_total = 0
    procura_restante = float('inf')  # ou valor real da procura para esse destino

    for transporte in ["avião", "comboio", "autocarro"]:  # ordem de prioridade
        # Filtrar movimentos para destino e transporte
        movimentos_filtrados = [
            mov for mov in movimentos
            if mov["cidade"] == destino and mov["transporte"] == transporte
        ]

        if not movimentos_filtrados:
            continue

        mov = movimentos_filtrados[0]
        tempo_viagem = calcular_tempo_viagem(
            mov["distancia"], transporte, origem, destino, condicoes_meteorologicas)

        # Quantas viagens dá para fazer no tempo limite?
        viagens_possiveis = int(tempo_limite // tempo_viagem)

        # Quantos veículos deste tipo temos disponíveis?
        frota = disponibilidade_veiculos.get(transporte, 0)

        # Pessoas transportadas por este transporte
        capacidade = veiculos_disponiveis[transporte].capacidade

        pessoas_transportadas = viagens_possiveis * frota * capacidade

        # Se já não há procura restante, para
        if pessoas_transportadas >= procura_restante:
            pessoas_transportadas = procura_restante
            pessoas_total += pessoas_transportadas
            break

        pessoas_total += pessoas_transportadas
        procura_restante -= pessoas_transportadas

    return pessoas_total

condicoes_meteorologicas = simular_condicoes_meteorologicas(grafo, probabilidade_afetacao=0.2)


def mostrar_condicoes(condicoes_meteorologicas):
    if not condicoes_meteorologicas:
        print("Nenhuma condição meteorológica adversa afeta as rotas.")
        return

    print("Condições meteorológicas adversas nas rotas:")
    for (origem, destino), info in condicoes_meteorologicas.items():
        clima = info["clima"]
        transportes = ", ".join(info["afeta"])
        print(f"  {origem} -> {destino}: {clima} (afeta: {transportes})")

condicoes_meteorologicas = simular_condicoes_meteorologicas(grafo, 0.2)
mostrar_condicoes(condicoes_meteorologicas)

def tempo_para_custo(tempo_horas):
    return tempo_horas * 10


def ucs_multimodal(grafo, estado_inicial, estado_objetivo, condicoes_meteorologicas, veiculos_disponiveis):
    fronteira = []
    # Agora armazenamos (custo, tempo_total, estado, caminho)
    heapq.heappush(fronteira, (0, 0, estado_inicial, []))

    visitados = set()

    while fronteira:
        custo_atual, tempo_atual, estado_atual, caminho = heapq.heappop(fronteira)

        if estado_atual in visitados:
            continue

        visitados.add(estado_atual)

        cidade_atual, transporte_atual = estado_atual
        caminho = caminho + [estado_atual]

        if cidade_atual == estado_objetivo[0]:
            return caminho, custo_atual, tempo_atual  # devolve caminho, custo e tempo

        movimentos = gerar_operadores_multimodais(grafo, estado_atual, condicoes_meteorologicas)

        for mov in movimentos:
            novo_estado = mov["estado"]
            distancia = mov["distancia"]
            transporte = mov["transporte"]
            custo_troca = mov.get("custo_troca", 0)

            tempo_viagem = calcular_tempo_viagem(distancia, transporte, cidade_atual, novo_estado[0], condicoes_meteorologicas)

            novo_tempo = tempo_atual + tempo_viagem + custo_troca
            novo_custo = tempo_para_custo(novo_tempo)  # custo calculado a partir do tempo total

            if novo_estado not in visitados:
                heapq.heappush(fronteira, (novo_custo, novo_tempo, novo_estado, caminho))

    return None, float('inf'), float('inf')


def imprimir_caminho_detalhado_com_avisos(caminho, condicoes_meteorologicas):
    print("\nCaminho detalhado:")
    tempo_total = 0
    custo_total = 0
    custo_por_hora_troca = 10.0  # podes ajustar este valor

    for i in range(len(caminho) - 1):
        origem, transporte_origem = caminho[i]
        destino, transporte_destino = caminho[i + 1]

        dados_ligacao = grafo.grafo[origem][destino]
        distancia = dados_ligacao["distancia"]
        transporte = transporte_destino

        tempo_base = distancia / veiculos_disponiveis[transporte].velocidade
        tempo_viagem = calcular_tempo_viagem(distancia, transporte, origem, destino, condicoes_meteorologicas)

        if transporte != transporte_origem:
            tempo_troca = random.uniform(0.17, 1.0)  # entre 10 min e 1 hora
            custo_troca = tempo_troca * custo_por_hora_troca
        else:
            tempo_troca = 0
            custo_troca = 0

        tempo_etapa = tempo_viagem + tempo_troca
        custo_etapa = tempo_para_custo(tempo_viagem) + custo_troca

        tempo_total += tempo_etapa
        custo_total += custo_etapa

        aviso = ""
        if tempo_viagem > tempo_base:
            aviso += f" (penalização meteorológica aplicada: +{tempo_viagem - tempo_base:.2f}h)"
        if tempo_troca > 0:
            aviso += f" (tempo troca transporte: +{tempo_troca:.2f}h, custo troca: +{custo_troca:.2f})"

        print(f"{origem} -> {destino}, transporte: {transporte}, "
              f"tempo base: {tempo_base:.2f}h, tempo etapa: {tempo_etapa:.2f}h, custo etapa: {custo_etapa:.2f}{aviso}")

    print(f"\nTempo total da viagem: {tempo_total:.2f} horas")
    print(f"Custo total da viagem: {custo_total:.2f}")


# Exemplo de chamada
estado_inicial = ("Porto", "nenhum")
estado_objetivo = ("Marraquexe", None)



caminho, custo, tempo = ucs_multimodal(grafo, estado_inicial, estado_objetivo, condicoes_meteorologicas, veiculos_disponiveis)
imprimir_caminho_detalhado_com_avisos(caminho, condicoes_meteorologicas)
print(f"Custo final: {custo:.2f}")
print(f"Tempo final: {tempo:.2f} horas")

velocidades = {
    "avião": 800,
    "comboio": 120,
    "autocarro": 80,
}

def heuristica_realista(grafo, cidade_atual, cidade_objetivo):
    if cidade_atual == cidade_objetivo:
        return 0

    # Obtém as ligações diretas (ou estimadas) entre cidades
    if (cidade_atual, cidade_objetivo) in distancias_aereas:
        distancia = distancias_aereas[(cidade_atual, cidade_objetivo)]
    elif (cidade_objetivo, cidade_atual) in distancias_aereas:
        distancia = distancias_aereas[(cidade_objetivo, cidade_atual)]
    else:
        return 0

    ligacoes = grafo.obter_ligacoes(cidade_atual)
    if cidade_objetivo not in ligacoes:
        return 0

    transportes_possiveis = ligacoes[cidade_objetivo]["transportes"]
    tempos = []
    for transporte in transportes_possiveis:
        velocidade = velocidades.get(transporte, 80)
        tempos.append(distancia / velocidade)

    if tempos:
        return min(tempos)
    else:
        return distancia / 800

def astar_multimodal(grafo, estado_inicial, estado_objetivo, condicoes_meteorologicas, veiculos_disponiveis):
    fronteira = []
    heapq.heappush(fronteira, (0, 0, estado_inicial, []))  # (f=g+h, g, estado, caminho)
    visitados = {}

    while fronteira:
        f, g, estado_atual, caminho = heapq.heappop(fronteira)
        if estado_atual in visitados and visitados[estado_atual] <= g:
            continue
        visitados[estado_atual] = g

        cidade_atual, transporte_atual = estado_atual
        caminho = caminho + [estado_atual]

        if cidade_atual == estado_objetivo[0]:
            return caminho, g

        movimentos = gerar_operadores_multimodais(grafo, estado_atual, condicoes_meteorologicas)

        for mov in movimentos:
            novo_estado = mov["estado"]
            distancia = mov["distancia"]
            transporte = mov["transporte"]
            custo_troca = mov.get("custo_troca", 0)

            tempo_viagem = calcular_tempo_viagem(distancia, transporte, cidade_atual, novo_estado[0], condicoes_meteorologicas)
            g_novo = g + tempo_viagem + custo_troca
            h = heuristica_realista(grafo, novo_estado[0], estado_objetivo[0])
            f_novo = g_novo + h

            if novo_estado not in visitados or visitados[novo_estado] > g_novo:
                heapq.heappush(fronteira, (f_novo, g_novo, novo_estado, caminho))

    return None, float('inf')


def imprimir_resultados_heuristica(caminho, condicoes_meteorologicas):
    tempo_total = 0
    custo_total = 0
    custo_por_hora_troca = 10.0  # custo por hora da troca, ajustável

    for i in range(len(caminho) - 1):
        origem, transporte_origem = caminho[i]
        destino, transporte_destino = caminho[i + 1]

        dados_ligacao = grafo.grafo[origem][destino]
        distancia = dados_ligacao["distancia"]
        transporte = transporte_destino

        tempo_base = distancia / veiculos_disponiveis[transporte].velocidade
        tempo_viagem = calcular_tempo_viagem(distancia, transporte, origem, destino, condicoes_meteorologicas)

        if transporte != transporte_origem:
            # Tempo aleatório para troca entre 10 minutos (0.17h) e 1 hora (1h)
            tempo_troca = random.uniform(0.17, 1.0)
            custo_troca = tempo_troca * custo_por_hora_troca
        else:
            tempo_troca = 0
            custo_troca = 0

        tempo_etapa = tempo_viagem + tempo_troca
        custo_etapa = tempo_para_custo(tempo_viagem) + custo_troca

        tempo_total += tempo_etapa
        custo_total += custo_etapa

        aviso = ""
        if tempo_viagem > tempo_base:
            aviso += f" (penalização meteorológica aplicada: +{tempo_viagem - tempo_base:.2f}h)"
        if tempo_troca > 0:
            aviso += f" (tempo troca transporte: +{tempo_troca:.2f}h, custo troca: +{custo_troca:.2f})"

        print(f"{origem} -> {destino}, transporte: {transporte}, tempo base: {tempo_base:.2f}h, "
              f"tempo etapa: {tempo_etapa:.2f}h, custo etapa: {custo_etapa:.2f}{aviso}")

    print(f"\nTempo total da viagem: {tempo_total:.2f} horas")
    print(f"Custo total da viagem: {custo_total:.2f}")

estado_inicial = ("Bilbao", "nenhum")
estado_objetivo = ("Marraquexe", None)

caminho, custo = astar_multimodal(grafo, estado_inicial, estado_objetivo, condicoes_meteorologicas, veiculos_disponiveis)

if caminho:
    print("\nResultados para o algoritmo A* (Bilbao -> Marraquexe):")
    imprimir_resultados_heuristica(caminho, condicoes_meteorologicas)
else:
    print("Caminho não encontrado pelo A*")


def bfs_multimodal(grafo, estado_inicial, estado_objetivo, condicoes_meteorologicas):
    fila = deque()
    fila.append((estado_inicial, []))  # (estado, caminho)
    visitados = set()
    
    while fila:
        estado_atual, caminho = fila.popleft()
        cidade_atual, transporte_atual = estado_atual
        
        if estado_atual in visitados:
            continue
        visitados.add(estado_atual)
        
        caminho = caminho + [estado_atual]
        
        if cidade_atual == estado_objetivo[0]:
            return caminho
        
        movimentos = gerar_operadores_multimodais(grafo, estado_atual, condicoes_meteorologicas)
        
        for mov in movimentos:
            novo_estado = mov["estado"]
            if novo_estado not in visitados:
                fila.append((novo_estado, caminho))
    
    return None  # se não encontrar caminho
caminho_bfs = bfs_multimodal(grafo, estado_inicial, estado_objetivo, condicoes_meteorologicas)

def imprimir_resultados_bfs(caminho, condicoes_meteorologicas):
    tempo_total = 0
    custo_total = 0

    print("\nCaminho detalhado (BFS):")

    for i in range(len(caminho) - 1):
        origem, transporte_origem = caminho[i]
        destino, transporte_destino = caminho[i + 1]

        dados_ligacao = grafo.grafo[origem][destino]
        distancia = dados_ligacao["distancia"]
        transporte = transporte_destino

        tempo_base = distancia / veiculos_disponiveis[transporte].velocidade
        tempo_viagem = calcular_tempo_viagem(distancia, transporte, origem, destino, condicoes_meteorologicas)

        custo_troca = 0 if transporte == transporte_origem else 5.0

        # Tempo da etapa excluindo custo troca
        tempo_etapa = tempo_viagem

        # Custo da etapa: custo do tempo + custo fixo da troca
        custo_etapa = tempo_para_custo(tempo_etapa) + custo_troca

        # Somar o tempo da viagem e a penalização da troca (tempo extra aleatório, se quiseres depois podes incluir)
        tempo_total += tempo_etapa + custo_troca  
        custo_total += custo_etapa

        aviso = ""
        if tempo_viagem > tempo_base:
            aviso += f" (penalização meteorológica aplicada: +{tempo_viagem - tempo_base:.2f}h)"
        if custo_troca > 0:
            aviso += f" (custo troca transporte: +{custo_troca:.2f})"

        print(f"{origem} -> {destino}, transporte: {transporte}, tempo base: {tempo_base:.2f}h, "
              f"tempo etapa: {tempo_etapa:.2f}h, custo etapa: {custo_etapa:.2f}{aviso}")

    print(f"\nTempo total da viagem: {tempo_total:.2f} horas")
    print(f"Custo total da viagem: {custo_total:.2f}")

# Uso após a execução do BFS
if caminho_bfs:
    imprimir_resultados_bfs(caminho_bfs, condicoes_meteorologicas)
else:
    print("Caminho não encontrado pelo BFS")

if caminho_bfs:
    imprimir_resultados_bfs(caminho_bfs, condicoes_meteorologicas)
else:
    print("Caminho não encontrado pelo BFS")


def dfs_multimodal(grafo, estado_inicial, estado_objetivo, condicoes_meteorologicas):
    """
    Algoritmo DFS (Depth-First Search) adaptado ao contexto multimodal com transportes e clima.
    """
    pilha = [(estado_inicial, [])]  # (estado atual, caminho acumulado)
    visitados = set()

    while pilha:
        estado_atual, caminho = pilha.pop()
        cidade_atual, transporte_atual = estado_atual

        if estado_atual in visitados:
            continue
        visitados.add(estado_atual)

        caminho = caminho + [estado_atual]

        if cidade_atual == estado_objetivo[0]:
            return caminho

        movimentos = gerar_operadores_multimodais(grafo, estado_atual, condicoes_meteorologicas)

        for mov in movimentos:
            novo_estado = mov["estado"]
            if novo_estado not in visitados:
                pilha.append((novo_estado, caminho))

    return None

def executar_dfs(grafo, origem, destino, condicoes_meteorologicas):
    """
    Função de alto nível para executar o algoritmo DFS e imprimir o caminho encontrado.
    """
    estado_inicial = (origem, "nenhum")
    estado_objetivo = (destino, None)

    caminho_dfs = dfs_multimodal(grafo, estado_inicial, estado_objetivo, condicoes_meteorologicas)

    if caminho_dfs:
        print(f"\nResultados para o algoritmo DFS ({origem} -> {destino}):")
        imprimir_resultados_bfs(caminho_dfs, condicoes_meteorologicas)
    else:
        print(f"Caminho não encontrado pelo DFS de {origem} para {destino}.")

